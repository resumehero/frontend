{
  "root": true,
  "ignorePatterns": ["**/*.e2e-spec.ts", "**/*.spec.ts", "**/*.po.ts", "**/test.ts", "bin/**/*.js"],
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:prettier/recommended"
      ],
      "rules": {
        "@angular-eslint/component-class-suffix": "error",
        "@angular-eslint/contextual-lifecycle": "error",
        "@angular-eslint/directive-class-suffix": "error",
        "@angular-eslint/directive-selector": ["error", { "type": "attribute", "style": "camelCase" }],
        "@angular-eslint/component-selector": ["error", { "type": "element", "style": "kebab-case" }],
        "max-len": ["error", { "code": 140, "ignorePattern": "^import [^,]+ from |^export | implements " }],
        "@typescript-eslint/array-type": ["error"],
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/default-param-last": ["error"],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-duplicate-enum-values": "warn",
        "@typescript-eslint/switch-exhaustiveness-check": "warn",
        "@typescript-eslint/explicit-function-return-type": ["error"],
        "@typescript-eslint/explicit-module-boundary-types": ["error", { "allowArgumentsExplicitlyTypedAsAny": true }],
        "@typescript-eslint/explicit-member-accessibility": ["error", { "accessibility": "no-public" }],
        "@typescript-eslint/member-ordering": ["error", { "default": ["signature", "field", ["get", "set"], "constructor", "method"] }],
        "no-empty": ["error"],
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "sort-keys": "off",
        "quotes": ["error", "single", { "allowTemplateLiterals": true, "avoidEscape": true }],
        "semi": ["error", "always"],
        "space-before-function-paren": ["error", { "anonymous": "never", "asyncArrow": "always", "named": "never" }],
        "@typescript-eslint/typedef": [
          "error",
          {
            "array-destructuring": true,
            "arrow-parameter": true,
            "member-variable-declaration": true,
            "object-destructuring": true,
            "parameter": true,
            "property-declaration": true,
            "variable-declaration": true,
            "variable-declaration-ignore-function": false
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "class",
            "modifiers": ["abstract"],
            "format": ["PascalCase"],
            "prefix": ["Abstract"]
          },
          {
            "selector": ["variable", "parameter", "classProperty", "accessor"],
            "types": ["boolean"],
            "format": ["PascalCase", "camelCase"],
            "prefix": ["is", "should", "has", "can", "did", "will", "with"],
            "filter": { "regex": "/^(value|required|readonly|disabled)$/gm", "match": true },
            "leadingUnderscore": "allow"
          },
          {
            "selector": "memberLike",
            "modifiers": ["readonly"],
            "format": ["UPPER_CASE"]
          },
          {
            "selector": "memberLike",
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "memberLike",
            "modifiers": ["private", "readonly"],
            "format": ["UPPER_CASE"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "memberLike",
            "modifiers": ["protected"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "memberLike",
            "modifiers": ["protected", "readonly"],
            "format": ["UPPER_CASE"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "property",
            "modifiers": ["readonly"],
            "format": ["PascalCase", "UPPER_CASE"]
          },
          {
            "selector": "property",
            "modifiers": ["private"],
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "property",
            "modifiers": ["private", "readonly"],
            "format": ["UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "property",
            "modifiers": ["protected"],
            "format": ["camelCase", "PascalCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "property",
            "modifiers": ["protected", "readonly"],
            "format": ["UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "prefix": ["I"]
          },
          {
            "selector": ["variableLike"],
            "format": ["camelCase", "UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "allow"
          }
        ],
        "comma-dangle": ["error", "never"],
        "@angular-eslint/no-conflicting-lifecycle": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-output-native": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error"
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {
        "max-len": ["error", { "code": 140 }],
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/no-negated-async": "error"
      }
    },
    {
      "files": ["*.html"],
      "excludedFiles": ["*inline-template-*.component.html"],
      "extends": "plugin:prettier/recommended",
      "rules": {
        "prettier/prettier": ["error", { "parser": "angular" }],
        "max-len": ["error", { "code": 140 }],
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/no-negated-async": "error"
      }
    }
  ]
}
